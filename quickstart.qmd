---
title: "quickstart"
author: "Dhrumil Mehta"
format: html
editor: visual
cache: false
---

## Python + R

A workflow for using Python and R in the same notebook. For another setup that uses Jupyter Notebooks to do the same, see: https://github.com/dmil/jupyter-quickstart

When you run this notebook, it should ask to install the `reticulate` package. Once that is installed correctly, you should be able to run both R and Python cells.

## Setup

**Note**: The following cell creates a python virtualenv, installs some packages (like `pandas` and `scikit-learn`).

https://rstudio.github.io/reticulate/articles/versions.html

```{r}
#| echo: false

library(reticulate)
venv_path <- paste0(getwd(),'/.venv')

# create virtualenv
virtualenv_create(venv_path,
                  packages=c("pandas", 
                             "scikit-learn"))

# use virtualenv
use_virtualenv(venv_path, required=TRUE)

```

## Running Code

When you click the **Render** button a document will be generated that includes both content and the output of embedded code.

You can embed R code like this:

```{r}

# Imports in R
require('tidyverse')

```

And python code like this:

```{python}

# Imports in Python
import pandas as pd
import numpy as np
```

## Code

The following code defines a dataframe `df` in Python with random data points.

```{python}

# create a dataframe of random numbers with two columns, A and B
df = pd.DataFrame(
    np.random.randint(0,100,size=(100, 2)), columns=list('AB'))

# display first 5 rows
df.head(5)

```

The following is an R cell. The `df` variable defined above is available as `py$df`.

Python variables should be accessible in R prefixed with `py$` . See the [reticulate cheat sheet](https://ugoproto.github.io/ugo_r_doc/pdf/reticulate.pdf) for more details on how to use Python and R together.

```{r}

ggplot(py$df) +
    aes(x=A, y=B) +
    geom_point() +
    theme_minimal() +
    ggtitle("Random points plotted")
```
